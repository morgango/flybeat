input
{

#    stdin {}

    azurewadtable
    {
        account_name => "morgango"
        access_key => "RLaZ5fMg6YR5Px56C42i6MWSsH6MFQCNH9xN7D12e4Pt4J0CclP7ssD7fJwpKxQ1h3mB3IPkt/Yc6OG+42Jk3A=="
        table_name => "LinuxsyslogVer2v0"
    }
}

filter {

        mutate { replace => { "type" => "azure" } }
 
	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Address %{IP:src_ip} maps to %{HOSTNAME:src_host}, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT"]
		add_tag => [ "ssh_possible_breakin", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: input_userauth_request: invalid user \[%{USER:user}\]"]
		add_tag => [ "ssh_invalid_userauth_requesth", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: input_userauth_request: invalid user %{USER:user} \[preauth\]"]
		
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Invalid user from %{IPV4:src_ip}"]
		add_tag => [ "ssh_invalid_user_ip", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Invalid user %{USER:user} from %{IP:src_ip}"]
		add_tag => [ "ssh_invalid_user_with_ip", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Accepted publickey for %{USER:user} from %{IP:src_ip} port %{BASE10NUM:port} ssh%{BASE10NUM:ssh_version}: %{WORD:protocol}\s+%{GREEDYDATA:key}"]
		add_tag => [ "ssh_accepted_public_key", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} CRON\[%{BASE10NUM:process_id}\]: \(%{USER:user}\) CMD \(%{GREEDYDATA:command}\)"]
		add_tag => [ "cron_process", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: error: maximum authentication attempts exceeded for invalid user %{USER:user} from %{IP:src_ip} port %{BASE10NUM:src_port} ssh2 \[%{USER:remote_user}\]"]
		add_tag => [ "ssh_maximum_attempts_invalid_user", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: error: maximum authentication attempts exceeded for %{USER:user} from %{IP:src_ip} port %{BASE10NUM:src_port} ssh2 \[%{USER:remote_user}\]"]
		add_tag => [ "ssh_maximum_attempts", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Connection closed by %{IPV4:src_ip} \[%{USER:remote_user}\]"]
		add_tag => [ "ssh_connection_closed", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Received disconnect from %{IPV4:src_ip}: %{BASE10NUM:src_port}: disconnected by user"]
		add_tag => [ "ssh_connection_disconnected_by_user", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Received disconnect from %{IPV4:src_ip}: %{BASE10NUM:src_port}: Client disconnecting normally \[%{USER:remote_user}\]"]
		add_tag => [ "ssh_connection_disconnected_normally", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Received disconnect from %{IP:src_ip}: %{BASE10NUM:port}: Bye Bye \[%{USER:user}\]"]
		add_tag => [ "ssh_connection_disconnected_bye_bye", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Received disconnect from %{IP:src_ip}: 11: \[preauth\]"]
		add_tag => [ "ssh_connection_disconnected_bye_bye", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: fatal: Read from socket failed: Connection reset by peer \[%{USER:user}\]"]
		add_tag => [ "ssh_socket_failed", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: Disconnecting: Too many authentication failures for %{USER:user} \[%{USER:remote_user}\]"]
		add_tag => [ "ssh_too_many_failures", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: pam_unix\(sshd:session\): session opened for user %{USER:user} by \(uid=%{BASE10NUM:uid}\)"]
		add_tag => [ "sshd__pam_session_opened", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} CRON\[%{BASE10NUM:process_id}\]: pam_unix\(cron:session\): session opened for user %{USER:user} by \(uid=%{BASE10NUM:uid}\)"]
		add_tag => [ "cron_pam_session_opened", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} CRON\[%{BASE10NUM:process_id}\]: pam_unix\(cron:session\): session closed for user %{USER:user}"]
		add_tag => [ "cron_pam_session_closed", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} CRON\[%{BASE10NUM:process_id}\]:  \(CRON\) info \(No MTA installed, discarding output\)"]
		add_tag => [ "cron_info", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "storvsc: %{GREEDYDATA:storage_message}"]
		add_tag => [ "storage_message", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		grok { match => [ "Msg", "%{SYSLOGTIMESTAMP:syslog_timestamp} sshd\[%{BASE10NUM:process_id}\]: reverse mapping checking getaddrinfo for %{HOSTNAME:hostname} \[%{IPV4:src_ip}\] failed - POSSIBLE BREAK-IN ATTEMPT!}"]
		add_tag => [ "ssh_reverse_mapping_failed", "grokked" ]
		tag_on_failure => [ ] }
	}

	if "grokked" not in [tags] {
		mutate { 
			add_tag => [ "unprocessed", "grokked" ]
		}
	}

	if "grokked" in [tags] {
		mutate { 
			remove_tag => [ "grokked" ]
		}
	}

}

output {
#	stdout { codec => rubydebug }

	file { path => "/tmp/azure/azure.txt" }

	elasticsearch { 
		hosts => ["https://07eb516c75a27e412eed02473bdc9766.us-east-1.aws.found.io:9243"]
		user => "beater"
		password => "password"
		index => "azure-%{+YYYY.MM.dd}"
		manage_template => false
		ssl => true
	}
}


